---
layout:     post
title:      "apply & call & bind"
subtitle:   "自问自答"
date:       2017-8-21
author:     "leeyixuan"
header-img: "img/background/post-bg-js.jpg"
tags:
    - js
---
## apply
函数对象具有apply方法。   
apply改变函数的执行环境，从而动态改变传入函数的this，并原地执行。    
接受两个参数，this作用域和参数（arguments或数组）。


## call
函数对象具有call方法。   
call改变函数的执行环境，从而动态改变传入函数的this，并原地执行。    
接受两个参数，this作用域和参数（准确地传入每一个参数，必须逐个列举出来）。



## bind
 函数对象具有bind方法。    
 bind改变函数的执行环境，从而动态改变传入函数的this，并创建一个新的**绑定函数**。   
 接受一个参数，this作用域。
```javascript
var bar = function(){
console.log(this.x);
}
var foo = {
x:3
}
bar(); // undefined
var func = bar.bind(foo);
func(); // 3
```
## call和apply和比较
call和apply的作用相同，他们的区别在于**接收参数的方式不同**
## apply、call、bind比较
当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。
```javascript
var obj = {
    x: 81,
};
 
var foo = {
    getX: function() {
        return this.x;
    }
}
 
console.log(foo.getX.bind(obj)());  //81
console.log(foo.getX.call(obj));    //81
console.log(foo.getX.apply(obj));   //81
```
**总结**：

apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；   
apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；   
apply 、 call 、bind 三者都可以利用后续参数传参；   
bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用。


## 进阶
1.call和apply可以动态地改变this的值。当一个object没有某个方法，但是其他的有，我们可以借助call或apply用其它对象的方法来操作。
>call和apply真正强大的地方在于扩充函数赖以生存的作用域。对象不需要与方法有任何关系，就能指定作用域。之前在指定的作用域中调用函数，需要将该函数放到对象中，再通过对象来调用该函数。

```javascript
function fruits() {}
 
fruits.prototype = {
    color: "red",
    say: function() {
        console.log("My color is " + this.color);
    }
}
 
var apple = new fruits;
apple.say();    //My color is red

banana = {
    color: "yellow"
}
apple.say.call(banana);     //My color is yellow
apple.say.apply(banana);    //My color is yellow
```




2.Javascript中存在一种名为伪数组的对象结构。比较特别的是 arguments 对象，还有像调用 getElementsByTagName , document.childNodes 之类的，它们返回NodeList对象都属于伪数组。不能应用 Array下的 push , pop 等方法。
通过 Array.prototype.slice.call 转化为标准数组，再使用数组方法。
但是我们能通过 Array.prototype.slice.call 转换为真正的数组的带有 length 属性的对象，这样 domNodes 就可以应用 Array 下的所有方法了。

例一：
```javascript
var domNodes = Array.prototype.slice.call(document.getElementsByTagName("*"));
```

例二：
```javascript
function log(){
  console.log.apply(console, arguments);
};
log(1);    //1
log(1,2);    //1 2
```


3.借助apply方法，就可以直接将数组传入，而不用手动地将数组中的项一个一个写入，可以直接将一个数组传递给一个不接受数组作为参数的函数。比如Array、Math、String。
	
例一：
```javascript
var  numbers = [5, 458 , 120 , -215 ]; 
var maxInNumbers = Math.max.apply(Math, numbers),   //458
var maxInNumbers2 = Math.max(5, 458 , 120 , -215),   //458

```

例二：
```javascript
var array1 = [12 , "foo" , {name "Joe"} , -2458]; 
var array2 = ["Doe" , 555 , 100]; 
Array.prototype.push.apply(array1, array2); 
/* array1 值为  [12 , "foo" , {name "Joe"} , -2458 , "Doe" , 555 , 100] */
```
## 参考资料
1.[深入浅出 妙用Javascript中apply、call、bind ][1]    
2.[如何理解和熟练运用js中的call及apply？ ][2]   
3.[[译]Apply和数组:三个技巧 ](http://www.cnblogs.com/ziyunfei/archive/2012/09/18/2690412.html)


  [1]: https://www.cnblogs.com/coco1s/p/4833199.html
  [2]: https://www.zhihu.com/question/20289071