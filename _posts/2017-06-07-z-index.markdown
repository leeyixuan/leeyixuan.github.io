---
layout:     post
title:      "z-index 知多少"
subtitle:   "从实践出发"
date:       2017-6-7
author:     "leeyixuan"
header-img: "img/background/post-bg-z-index.jpg"
tags:
    - css
---



z-index 属性是用来设置元素的堆叠顺序。   
我在使用z-index的过程中发现z-index没那么简单，因此上网查阅了相关资料，同时带着自己的疑惑动手做了几个demo。现在把学习心得整理如下：




## z-index详解
- z-index值可以控制定位元素在垂直于显示屏方向（Z 轴）上的堆叠顺序（stack order），z-index值大的元素发生重叠时会覆盖在z-index值小的元素上面。

- 为元素设置position值为relative/absolute/fixed后，z-index属性才能被激活。 

- z-index值只决定**具有同一父元素**的**兄弟元素**的堆叠顺序。兄弟元素的z-index值如果相同，则堆叠顺序由元素在文档中的**先后位置决定**，后出现的会在上面。

- 父元素的z-index值为子元素定义了堆叠顺序（“拼爹模式”）。所以如果当你发现一个z-index值较大的元素被值较小的元素遮挡了，多半是因为他们的父结点含有激活并设置了z-index值的position定位元素。（如果a的父级元素的z-index值低于b的父级元素的z-index值话，a元素本身z-index值再怎么远高于b也没用）

## z-index实践
学习完z-index相关特性之后，我有着许多疑惑。带着这些疑惑，我动手做了几个demo，在这个过程中也更加深入地理解了上述的z-index的各种特性。



> **疑惑 1**. 如果子元素分别属于不同的父元素，而且这些父元素设置了position而没有设置z-index，那么这些子元素的层级是怎样的？
 
**demo**:

<iframe height='400' scrolling='no' title='z-index(1)' src='//codepen.io/Imomo/embed/YYxWMd/?height=124&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/YYxWMd/'>z-index(1)</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
**分析**：如图，红色的图层覆盖了粉色的图层。同时，删去红色图层的`z-index=1`，只保留粉色图层的`z-index=1`，此时粉色图层出现在红色图层之上。在一定程度上说明，当父级元素都没有设置z-index时，根据先后顺序定义层级高低只是无奈之举，实质上这些父级元素的z-index都是0，是同一个平面上。

**总结**：虽然这些父元素都没有设置z-index，但是这些父元素并不是在同一水平面上的。根据这些父元素有先后顺序来定义水平的高低，后面出现的父元素的层级更高。
	
	
> **疑惑 2**. 怎样理解元素设置了position而没有设置z-index的层级？
 
**demo**:
<iframe height='400' scrolling='no' title='z-index(5)' src='//codepen.io/Imomo/embed/MBYWWj/?height=135&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/MBYWWj/'>z-index(5)</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

**分析**：粉色块遮盖了红色块，就是因为粉色块是定位元素，层级更高。如果将红色块也设置为定位元素，因为红色块在后面，所以会覆盖粉色块。
	
**总结**：将z-index设置为0与不设置z-index属性没有区别，那么其实这些设置了position的元素其实已经高于一般的元素了。设置了position和没有设置position的元素其实就是属于不同的世界平面。没有设置position的元素的世界是二维平面，没有z-index的概念。只有设置了position的元素才有z-index的概念，只有这个世界是立体的。
	
> **疑惑 3**. 设置float和position的元素又怎么说呢？float元素和position元素的层级怎么比较？

**demo**：
<iframe height='400' scrolling='no' title='z-index(2)' src='//codepen.io/Imomo/embed/PEKGgW/?height=54&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/PEKGgW/'>z-index(2)</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
**分析**：即使absolute的div出现在float的div之后，absolute仍然可以覆盖float。将注释的normol还原，float出现，但是第二个normal仍然被覆盖。这是因为，第二个normal的div在下面把空间撑开了，然后float把该空间覆盖，并且，如果没有指定float的距离，那么默认的定位点就是正常文档流中该元素的定位点。

**总结**： float没有z-index的概念，虽然如此设置了float的元素的层级也是高于一般的元素，并且低于position元素的层级。


 > **疑惑 4**. 所以说，float元素的z-index是什么？难道是0？没有position/float的元素，float元素和position元素，这三个世界的初始高度（没有设置z-index）是什么？
**demo**:
<iframe height='400' scrolling='no' title='z-index(4）' src='//codepen.io/Imomo/embed/vpJgBp/?height=85&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/vpJgBp/'>z-index(4）</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

**分析**：图中，第三个normal为第二个float撑开了空间，由于absolute的z-index=-1，所以被float覆盖。之所以，normal被挤到下一行，是因为float的文字环绕特性。

**总结**：
- z-index 仅能在定位元素上奏效。
- float是比没有设置z-index的position要低的，而且float比什么都没有设置的元素要高。
- z-index=-1时，position是低于float和普通元素的。
- 没有设置z-index的position就相当于z-index=0。更更并且，z-index只能是整数。    
综上，我进行了一下假设加深我对z-index的理解：   
（1）没有设置z-index的定位元素，z-index=0   
（2）float元素，z-index=-0.1   
（3）正常流元素，z-index=-0.5   

> **疑惑 5**. 子元素的z-index可以小于父元素的吗？换句话说，就是子元素的层级可以低于父元素的层级吗？

**demo**:
<iframe height='400' scrolling='no' title='z-index（3）' src='//codepen.io/Imomo/embed/rpzrKj/?height=144&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/rpzrKj/'>z-index（3）</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
**总结**：可以。父元素没有设置任何定位属性，子元素设置position：relative，z-index=-1。


## 层叠上下文
事实上在一个层叠上下文中一共可以有7种层叠等级，列举如下：

- 背景和边框 —— 形成层叠上下文的元素的背景和边框。 层叠上下文中的最低等级。
- 负z-index值 —— 层叠上下文内有着负z-index值的子元素。
- 块级盒 —— 文档流中非行内非定位子元素。
- 浮动盒 —— 非定位浮动元素。
- 行内盒 —— 文档流中行内级别非定位子元素。
- z-index: 0 —— 定位元素。 这些元素形成了新的层叠上下文。
- 正z-index值 —— 定位元素。 层叠上下文中的最高等级。

<img class="shadow" width="450" src="https://www.github.com/CoolRabbit520/photos/raw/master/小书匠/1531289270611.png" />


## reference

1. [What You May Not Know About the Z-Index Property](https://webdesign.tutsplus.com/articles/what-you-may-not-know-about-the-z-index-property--webdesign-16892?ec_unit=translation-info-language)
2. [浅析CSS——元素重叠及position定位的z-index顺序](http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html)