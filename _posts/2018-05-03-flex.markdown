---
layout:     post
title:      "深入学习flex布局"
subtitle:   "弹性布局全解"
date:       2018-5-03
author:     "leeyixuan"
header-img: "img/background/post-bg-flex.jpg"
tags:
    - css3
---

Flex 是 Flexible Box的缩写，意为“弹性布局”，可以简便、完整、响应式地实现各种页面布局。

Flex的出现就是为了解决传统布局的`display`属性 + `position`属性 + `float`属性的复杂性。

任何一个容器都可以指定为 Flex 布局，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。

## flex基本介绍
在父容器上设定属性，便可以满足基本布局的要求：
1. 确定使用flex布局方案，为容器添加属性`display:flex`
2. 确定容器的主轴方向，`flex-direction`
3. 确定容器主轴对齐，`justify-content`
4. 确定容器交叉轴对齐，`align-items`

如果仅仅对父容器进行设置还不能满足布局要求的话，还可以为子item设置一些属性：
- 顺序`order`
- 放大`flex-grow`
- 缩小`flex-shrink`
- 项目占据的主轴空间`flex-basis`
- 前三项的简写属性`flex: flex-grow | flex-shrink | flex-basis`
- 覆盖容器的align-items的属性`align-self`

## flex 属性

flex属性包含三个值：`flex-grow`、`flex-shrink`和`flex-basis`

+ `flex-grow`: 扩展比例
+ `flex-shrink`: 收缩比例
+ `flex-basis`: 伸缩基准值

首先我们简单写一个flex布局的Demo:
<iframe height='400' scrolling='no' title='flex' src='//codepen.io/Imomo/embed/mjbVdW/?height=119&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/mjbVdW/'>flex</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

设置父元素`display: flex`，其子元素就能使用flex布局，我们只是简单的为子元素使用了`flex: 1`就实现了三等分，而且会随着父元素的宽度变化而变化。这就是我们平时flex布局的简单用法，即各个子元素按照比例布局。

`flex: 1`其实是`flex: 1 1 0%`的简写属性，即伸缩比例都是1。下面我们就分别理解下三个属性值对于布局的影响。

## flex-basis 属性

`flex-basis`属性定义了项目占据的主轴空间（main size）。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。

通过子元素`flex-basis`属性和与父元素(容器)宽度值进行比较，会出现两种情况(忽略相等的情况)：
+ 子元素`flex-basis`属性之和 < 父元素宽度
+ 子元素`flex-basis`属性之和 > 父元素宽度

上面的两种情况就分别对应了`flex-grow`和`flex-shrink`属性生效的情况，也就是说当子元素的`flex-basis`属性宽度和小于父元素的宽度值时`flex-grow`生效，反之`flex-shrink`生效。

## flex-grow 属性

`flex-grow`属性是扩展比例，上面我们也谈到了当子元素的`flex-basis`总和小于父元素的宽度值时`flex-grow`生效。

现在我们就来改变CSS，满足这个前提条件。

<iframe height='400' scrolling='no' title='flex-grow' src='//codepen.io/Imomo/embed/jpNbRx/?height=135&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/jpNbRx/'>flex-grow</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

此时，各个元素的`flex-basis`和为`(150 + 100 + 150) = 400px`, 小于父元素的`600px`,我们就来分别计算每个子元素的宽度值。
```
可用空间 = 父元素width - 子元素flex-basis总和 => 600 - (150 + 100 + 150) = 200

单位扩展空间 = 可用空间/子元素flex-grow总和 => 200/(1 + 0 + 1) = 100
```
子元素的计算公式为`width = flex-basis + flex-grow * 单位扩展空间`

所以`child_1`宽度为`(150 + 1 * 100) = 250px`, `child_2`宽度为`(100 + 0 * 100) = 100px`, `child_3` 同 `child_1`。

## flex-shrink 属性

`flex-shrink` 属性是收缩比例，当子元素的`flex-basis`总和大于父元素的宽度值时`flex-grow`生效。

现在我们就修改CSS满足这个前提。

<iframe height='400' scrolling='no' title='flex-shrink' src='//codepen.io/Imomo/embed/rrBOXb/?height=106&theme-id=33983&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/Imomo/pen/rrBOXb/'>flex-shrink</a> by Imomo (<a href='https://codepen.io/Imomo'>@Imomo</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>



flex-basis的计算不同于flex-grow的计算。通过Google，发现了一种收缩因数的计算方法：
```
理想空间 = 子元素(flex-basis * flex-shrink)之和 => 400 * 1 + 200 * 1 + 400 * 2 = 1400

溢出空间 = 父元素width - 子元素flex-basis总和 => 600 - (400 + 200 + 400) = -400

收缩因数 = (flex-basis * flex-shrink) / 理想空间 => 400 / 1400 = 0.286; 200 / 1400 = 0.143; 800 / 1400 = 0.571
```
分别为每个子元素计算了收缩因数就能计算我们子元素的实际宽度，子元素的计算公式`width = flex-basis + 收缩因数 * 溢出空间`

所以`child_1`宽度为`400 + 0.286 * (-400) = 285.6`, `child_2`宽度为`200 + 0.143 * (-400) = 142.8`, `child_3`宽度为`400 + 0.571 * (-400) = 171.6`

