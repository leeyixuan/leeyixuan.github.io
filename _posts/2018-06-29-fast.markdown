---
layout:     post
title:      "前端性能优化概述"
subtitle:   ""
date:       2018-6-29
author:     "leeyixuan"
header-img: "img/background/post-bg-flex.jpg"
tags:
    - 工程化
---


从用户角度而言，优化是为了让页面加载得更快、对用户的操作响应得更及时，能够给用户提供更为友好的体验。从服务商角度而言，优化是为了减少页面请求数、或者减小请求所占带宽，能够节省可观的资源。

## 1. HTML
减少不必要的DOM节点，加速DOM树构建和提升JS遍历DOM的速度。 

头部head引入CSS，提前加载并构建CSSOM树，提升首屏速度。（不适用`@import`引入CSS，@import需要页面完全载入以后再加载，无法提前并行加载，这其实就相当于在尾部引入CSS）

尾部引入JS（`<\body>`之前），避免JS解析阻塞页面渲染。

## 2. 代码去重
避免重复引用相同的代码。
## 3. 代码压缩
压缩具体来说就是从代码中去除不必要的字符以减少大小，从而提升加载速度。代码最小化就是去掉所有注释和不必要的空白字符（空格，换行和tab）。
## 4. 浏览器缓存
设置HTTP header信息（expires\cache control\Etags）, 缓存静态资源。注意只是缓存外部资源文件，内嵌在html中的CSS和JS不会缓存。
>相关细节可见我之前写过的文章：   
[《浏览器缓存》](https://leeyixuan.github.io/2017/04/05/IFC/)

## 5. 避免不必要的回流reflow
>相关细节可见我之前写过的文章：   
[《重绘和回流》](https://leeyixuan.github.io/2017/11/28/reflow/)

## 6. 合并HTTP请求
CSS sprite将多张图片合并成一张图片，减少图片请求。
>相关细节可见我之前写过的文章：   
[《重绘和回流》](https://leeyixuan.github.io/2017/11/28/reflow/)


代码打包，在解决代码模块依赖的同时将代码尽可能地打包到一起。
>相关细节可见我之前写过的文章：   
[《重绘和回流》](https://leeyixuan.github.io/2017/11/28/reflow/)

## 7. cookie
coockie 是通过HTTP文件头来在web服务器和浏览器之间进行交流的。
- 去除不必要的coockie，使coockie体积尽量小以减少对用户响应的影响；
- 注意在适应级别的域名上设置coockie以便使子域名不受影响；设置合理的过期时间；
- 较早地Expire时间和不要过早去清除coockie，都会改善用户的响应时间。
- 图片等静态资源也会携带cookie，而这些cookie毫无意义，应该使用隔离的不带cookie域名存放静态资源。
>相关细节可见我之前写过的文章：   
[《重绘和回流》](https://leeyixuan.github.io/2017/11/28/reflow/)

## 8. 资源预加载和延迟加载

预加载是指提前加载图片，当用户需要查看时可直接从本地缓存中渲染。

延迟加载即在长网页中延迟加载图像。用户滚动到它们之前，视口外的图像不会加载。这与图像预加载相反，在长网页上使用延迟加载将使网页加载更快。在某些情况下，它还可以帮助减少服务器负载。
>相关细节可见我之前写过的文章：   
[《重绘和回流》](https://leeyixuan.github.io/2017/11/28/reflow/)


## 9. CDN
用户与你网站服务器的接近程度会影响响应时间的长短。把你的网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。