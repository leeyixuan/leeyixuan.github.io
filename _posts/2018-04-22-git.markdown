---
layout:     post
title:      "git常用操作指南"
subtitle:   "关于git的十个问题"
date:       2018-4-22
author:     "leeyixuan"
header-img: "img/background/post-bg-git.jpg"
tags:
    - git
---



在平时学习工作中，会经常使用git。遇到问题了到网上查一查git指令，几个指令试一试，基本上也都搞定，但其实总是一知半解。为什么会出现这些问题？出现这些问题我该怎么？
在这里我总结了几个经常遇到的问题以及我的理解，分享给大家，希望能给大家带来帮助。

## 1. 为什么所有人都建议我在push之前要pull一次？   
这是为了避免push出现冲突的问题。   
举个例子:   
A和同时修改文件，原始版本号为a。      
A对文件的第一行进行了修改，版本号从a->b，并提交到git中，.git记录了文件的版本号变更。      
B也对文件的第一行进行了修改，版本从a->c，提交到git时，提示了错误，这是因为在提交之前检测到版本号已经不是a而是b了。此时，B需要将文件pull一遍（重新拉取一遍git上最新版的文件，进行合并处理），之后再push。      

## 2. push出现冲突，我该怎么办？
push出现冲突是因为小伙伴的最新提交和我试图推送的提交有冲突。   
本质上是我提交的分支与此时远程分支merge出现冲突。此时需要先拉取远程最新代码，手动解决冲突后提交并再次push：   
step1：用`git pull`，拉取远程分支最新代码，在本地进行merge合并。   
step2：用命令`git status`找到冲突的文件。    
step3：对冲突文件进行修改。   
step4：用命令`git add <file>`将文件添加到缓存区，   
step5：用命令`git commit -m "conflict fixed"`提交。   
step6：再次使用`git push`，推送代码。   

另外，`git pull`提示`no tracking information`，则说明当前本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`。
## 3. 老大让我合并分支，merge和rebase我用啥？
merge和rebase都是合并命令，从效果来讲没有什么不同，不过从提交历史上看会有不同。   
rebase在当前分支上重演另一个分支的历史，提交历史是线性的。   

<img class="shadow" width="450" src="/img/post/rebase.png" />

merge当前分支和另一个分支以及他们的共同祖父节点进行一次三方合并，并且产生最新节点，提交历史不是线性的。

<img class="shadow" width="450" src="/img/post/merge.png" />

总的来说，如果你的需求只是合并分支的话，用哪个命令看你心情。不过，我还是建议使用merge，因为被合并之分支的历史版本都还会继续保留，通过版本号总可以找到被合并分支的各个历史版本。
## 4. merge出现冲突了，我该怎么办？
merge出现冲突是因为：正在合并的两个分支针对同一文件进行了不同的修改。   
此时必须手动解决冲突后再提交：   
step1：用命令`git status`找到冲突的文件。   
step2：对冲突文件进行修改。   
>Git用《《《《，=======，》》》》标记出不同分支的内容，记得最后要删去这些标记，只留下需要的内容。   

step3：用命令`git add <file>`将文件添加到缓存区.   
step4：用命令`git commit -m "conflict fixed"`提交。   

## 5. 代码写到一半，老大让我先迁到另一个分支上开发新功能，本地工作区的代码还没写好不能commit但是又不想放弃当前的工作，我该怎么办？
请使用stash功能。stash将未完成的修改保存到一个栈上，之后可以在任何时候重新获取这些改动。   
step1：用`git stash`，把当前工作现场“储藏”起来。   
step2：用`git checkout feature`，切换到feature分支上干活。   
step3：用`git commit -a -m 'new feature'`，将所有文件添加到缓存区并提交。   
step4：用`git checkout master`，切换回主分支。   
step5：用`git status`，查看缓存区，发现工作区是干净的。   
step6：用`git stash pop`，恢复工作现场同时把stash内容删除。   


## 6. 我已经使用命令git add开始跟踪一个文件，为什么之后每次git commit之前都要重新git add？
add是个多功能命令：   
- 开始跟踪新文件  
- 把已跟踪的文件放到暂存区
- 合并时把有冲突的文件标记为已解决状态等。

将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。

每次commit只是提交当前缓存区的文件。将工作区的文件添加到缓存就是通过add命令完成的。因此，如果不在commit之前add，缓存区为空，就无法commit。

另外，`git commit`加上`-a`选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 `git add`步骤。


## 7. 本地删除文件之后无法成功push，这究竟是为什么？
由于之前使用命令`git add`开始跟踪该文件，删除该文件之后版本库追踪不到该文件，所以还需要用命令`git rm`取消对该文件的跟踪。

`git rm`命令详解：
- 直接使用该命令不仅仅可以将已跟踪文件清单中移除，而且能连带从工作目录中删除指定的文件。
- 删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 `-f`。
- 如果commit后，要移除跟踪但不删除文件， 则必须要用选项 `--cached` 。

如果是不小心发生了误删，使用`git checkout -- <file>`恢复文件到最新版本。
## 8. 提交代码之前我想用diff检查提交本次修改了哪些代码，具体要使用什么指令？
diff命令可以比较不同文件对象的差异：   
- `git diff` 显示当前工作区的文件和缓存区文件的差异
- `git diff --staged `显示缓存区和HEAD的文件的差异
- `git diff HEAD` 显示工作区和HEAD文件的差异


<img class="shadow" width="450" src="/img/post/diff.png" />


总结一下：
- 如果此时缓存区为空并且想要添加全部修改并提交，使用`git diff HEAD`命令。
- 如果在此之前已经进行过多次add操作，只是想查看缓存区和目前工作区的差异，使用`git diff`命令。


注意：`git diff`只显示尚未add的改动，而不是自上次commit以来所做的所有改动。    所以有时候你一下子add了所有更新过的文件后，运行`git diff`后却什么也没有，就是这个原因。

## 9. 我想历史回退但是用reset还是checkout好呢？
### checkout和reset详解
**checkout用于：切换分支。迁出文件到工作区，让整个工作区回退到某个历史版本。如果只想将工作区中的某个文件回退到某个历史版本，可以专门指定某个文件。**

<img class="shadow" width="450" src="/img/post/checkout.png" />

注意：
1. checkout只会改变HEAD的指向，不会修改任何分支的指向。
2. 暂存区域为空，工作目录中的内容会和指定版本保持一致。
3. checkout不仅仅可以在不同分支之间来回切换，而且还能在指定某个标签或者版本号，在历史版本之间互相切换，十分灵活。
4. 在不同分支之间来回切换时，只存在于老的提交节点中的文件会被删除，新提交节点中的所有文件都会被复制到暂存区域和工作目录中。
5. 如果命令中仅仅指定文件名而没有指定提交节点（分支名、版本号、标签），则会从暂存区域中拷贝内容。

**reset用于：修改当前分支的指向，把当前分支指向另一个位置，从版本库中复制文件到缓存区。**

<img class="shadow" width="450" src="/img/post/reset.png" />

注意：
1. reset默认仅仅修改缓存区的内容。可以通过使用`--hard`同时更新工作区；使用`--soft`不更新缓存区和工作区的内容，只改变HEAD的指向。
2. git会从指定的提交中拷贝文件到暂存区域和工作目录，如果没有给出提交点的版本号，那么默认用HEAD，那么缓存区被最后一次版本库覆盖。

**区别： reset会修改当前分支的指向，缓存区回退到某个历史版本的状态，工作区会保持原状；checkout只会改变HEAD的指向，不会修改任何分支的指向，工作区会发生变化。**


### 场景举例

**场景1**：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改。   
用命令`git checkout --<file>`。   
>如果file自修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态；file已经添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态。

**场景2**：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改。   
step1：用命令`git reset HEAD --<file>`暂存区的修改撤销掉（unstage），重新放回工作区。   
step2：用命令`git checkout --<file>`直接丢弃工作区的修改时。   

其实，也可以直接`git checkout HEAD --<file>`

**场景3**：已经提交了不合适的修改到版本库时，想要撤销本次提交。    
step1：用命令`git reset --hard commit_id`。


**场景4**：提交了不合适的修改到版本库时，并且不小心推送到远程仓库，想要撤销本次提交。   
step1：用命令`git reset --hard commit_id`，抛弃当前工作区的修改，回退到上次commit的状态。   
step2：用命令`git push --force`，为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数--force。   



## 10. 为什么有时候执行push命令时需要手动为本地分支和远程分支创建跟踪，有时候并不需要创建跟踪？

创建一个git版本库有两个途径：一是在本地`git init`直接创建，而是`git clone`克隆一个远程仓库。

clone会自动绑定远程仓库并默认以 “origin” 为简写。同时，clone命令会自动为所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动"追踪"origin/master分支。在这种情况下，不需要显式地手动设置分支之间的追踪关系，直接使用push就能推送代码到远程分支。

在其他情况下，则需要使用`git branch -u`或`git branch --set-upstream-to`来显式地设置，为当前分支为设置默认推送及拉取的远程分支的信息。

push代码之前可以通过`git remote -v`查看远程仓库的信息。


## git的使用经验：

- 多使用`git status`查看当前缓存区的情况；
- 遇到问题不要慌，这个时候提示的指令很有用，往往按照提示一步一步来就能解决问题；
- 合并冲突了不可怕，解决冲突就再次提交。


## 最后推荐几个学习资料给大家：
1. [Git Reference Manual](https://git-scm.com/docs)
2. [图解Git](https://marklodato.github.io/visual-git-guide/index-zh-cn.html)
3. [Git教程 - 廖雪峰的官方网站](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)
4. [pro Git](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93)


haha


