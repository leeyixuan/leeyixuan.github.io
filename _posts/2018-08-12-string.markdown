---
layout:     post
title:      "JS中的字符处理"
subtitle:   ""
date:       2018-8-12
author:     "leeyixuan"
header-img: "img/background/post-bg-js.jpg"
tags:
    - js
---
## Unicode和UCS
Unicode和UCS编码是两个不同的国际化组织发布的字符集标准。
Unicode和UCS可以容纳全世界所有的文字字符，并对它们统一进行编码，让每一个字符都对应一个不同的编码值。
为了兼容，到Unicode2.0时，Unicode和UCS的字符集基本一致。
>`字符集`可以理解为由若干个`码点-字符对`构成的集合。码点就是一串数字ID，标识不同的字符。

>这里描述的`字符集基本一致`是指：
>1. 码点和字符的映射关系是相同的，即同一个码点值在不同的标准中对应的字符是相同的。
>2. 所包含的字符数相同，包含码点范围：U+000000到U+10FFFF。其中U+0000到U+FFFF范围的码点，称为基本平面内，BMP，存放最常见的字符。在U+010000到U+10FFFF范围的码点，称为辅助平面内，SMP。

Unicode和UCS的区别主要体现在他们各种实现的编码范方式。

Unicode有三种编码方式：
- UTF-8：1-4字节变长编码，覆盖BMP+SMP。这种编码最为常见，一是因为他是1-4字节变长编码节省空间，而是他完全兼容ASCII编码。
- UTF-16：2-4字节编码，覆盖BMP+SMP。在BMP，使用2字节编码；在SMP，使用4字节编码。
- UTF-32：4字节编码，覆盖BMP+SMP。

UCS有两种编码方式：
- UCS-2：2字节编码，只覆盖BMP。UCS-2可以视作是UTF-16的子集。
- UCS-4：4字节编码，覆盖BMP+SMP。UTF-32是UCS-4的一个子集。


## Javascript使用UCS-2编码


>因为Unicode和UCS的字符集基本一致，所以也经常见到`JavaScript 使用 Unicode 字符集`这样的描述。

JavaScript使用UCS-2编码。由于UCS-2只覆盖BMP，使用2字节编码。于是JavaScript默认字符都是2个字节。针对SMP的字符，在UCS-2无法识别，会把一个4字节的字符拆解为两个2字节的字符，产生错误。JavaScript字符处理出错的本质原因就是由于此。


## ES5中的字符处理
### 1. `\uxxxx`
ES5允许直接在程序中使用 Unicode 码点表示字符，即将字符写成`\uxxxx`的形式。比如：`var s = '\u00A9'; // "©"`

注意：
- 码点值使用4为16进制数表示，不够4位的使用0补足，不能带0x的前缀。
- 对于码点在SMP的字符，长度为32位（需要6位16进制数才能表示），要将其拆为两个4位16进制数。比如：`\u01D306`拆解位`\uD834\uDF06`。


### 2. String.fromCharCode()
String.fromCharCode()方法可以达到和`\uxxxx`一样的目的，即可以通过Unicode 码点返回对应的字符。

- 输入：默认十进制码点值；也可以使用16进制数码点值，但是要带0x前缀。`String.fromCharCode(0x61)`等于`String.fromCharCode(97)`
- 返回：对应字符
`String.fromCharCode(97) // "a"`
- 注意：该方法不支持 Unicode 码点大于0xFFFF的字符，即传入的参数不能大于0xFFFF（即十进制的 65535）。码点大于0xFFFF的字符占用四个字节，必须把字符拆成两个字符表示。`String.fromCharCode(55357, 56489); //"💩"`

### 3. String.prototype.charCodeAt() 

ES5还提供一个可以根据字符获取码点的函数，String.fromCharCode()的逆方法——String.prototype.charCodeAt() 
- 参数：字符串指定位置的索引
- 返回：对应字符的Unicode 码点（十进制表示）
- 注意：返回的 Unicode 码点不会大于65536（0xFFFF），也就是说，只返回两个字节的字符的码点。如果遇到码点大于 65536 的字符（四个字节的字符），必需连续使用两次charCodeAt。
```javascript
'💩'.charCodeAt(0); //55357  
'💩'.charCodeAt(1); // 56489
```

String.prototype.charCodeAt() 返回的是码点的十进制值，如果想要十六进制的值，可以使用toString方法转换一下。
`'a'.charCodeAt().toString(16); //61`

## ES6中的字符处理
### 1. `\u{xxxx}`
拓展了`\uxxxx`表达法，变成`\u{xxxx}`
虽然码点值还是只支持16进制数，但是不一定要使用4位表示，不够4位的不用补足，超过4位的不用拆解为两个，都可以直接使用。
```javascript
'\u{61}'; //'a'
'\u{128169}'; // '💩'
```
### 2. String.fromCodePoint()
String.fromCodePoint()方法可以达到和`\u{xxxx}`一样的目的，即可以通过Unicode 码点返回对应的字符。和String.fromCharCode()不同的是，该方法还支持 Unicode 码点大于0xFFFF的字符。

`String.fromCodePoint(128169); //"💩" `



### 3. String.prototype.codePointAt() 
ES5还提供一个可以根据字符获取码点的函数，String.fromCodePoint()的逆方法——String.prototype.codePointAt() 。和String.prototype.charCodeAt() 不同的是，该方法能够正确处理 4 个字节储存的字符，返回一个字符的码点。

`"💩".codePointAt(); //128169`


### 4. for...of
ES6 为字符串添加了遍历器接口，使得字符串可以被for...of循环遍历。除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。

### 5. Array.from()
该接口可以识别大于0xFFFF的码点，在适当的地方分割字符。
可以只用Array.from()将字符串转换成数组，再求length。



## JavaScript字符解码的易错点                                 
易错点1.判断字长出错。    
`>”💩”.length;  //2`    
解决办法：   
`Array.from('💩').length; //1`

易错点2.读取字符串出错   
`'一坨💩'.split(''); //["一", "坨", "�", "�"]`   
解决办法：    
`Array.from('💩'); //["💩"]`

易错点3.码点字符串转换出错     
`String.fromCharCode(128169); //""`    
`"💩".charCodeAt(); //55357`     
解决办法：    
`String.fromCodePoint(128169); //"💩" `     
`"💩".codePointAt(); //128169`   

易错点4.正则匹配出错     
`/foo.bar/.test('foo💩bar');   //false`     
解决办法：     
增加一个u标志，`/foo.bar/u.test('foo💩bar');  //true`

**总结**：尽量使用ES6语法避免出错 
- `\u{码点值}` ，避免4字节码点值被拆解
- 字符串的length属性还是用双字节判断的，所以判断长度要用`Array.from(str).length` 
-  遍历字符串使用`for(let s of str) {}`
-  使用`String.fromCodePoint`和`string.codePointAt()`获得字符串和码点值


## reference
1. [unicode和ucs的区别](https://blog.csdn.net/ultrani/article/details/8432767)
2. [细说：Unicode, UTF-8, UTF-16, UTF-32, UCS-2, UCS-4](https://www.cnblogs.com/malecrab/p/5300503.html)
3. [Javascript有个Unicode的天坑 - AlloyTeam](http://www.alloyteam.com/2016/12/javascript-has-a-unicode-sinkhole/)
4. [字符串的扩展 - ECMAScript 6入门](http://es6.ruanyifeng.com/#docs/string#codePointAt)
5. [String 对象 - JavaScript ](https://wangdoc.com/javascript/stdlib/string.html#stringfromcharcode)