---
layout:     post
title:      "TCP"
subtitle:   ""
date:       2018-5-12
author:     "leeyixuan"
header-img: "img/background/post-bg-flex.jpg"
tags:
    - TCP/IP协议
---

## OSI 网络七层模型
![][1]

![][2]

## TCP协议
TCP 提供一种面向连接的、可靠的字节流服务。

注意：TCP并不能保证数据一定会被对方接收到，因为这是不可能的。TCP能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说TCP也不是100%可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。
## TCP和UDP的区别


 <img class="shadow" width="450" src="https://www.github.com/CoolRabbit520/photos/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1522401448322.jpg" />

UDP是面向报文的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并。
TCP会将数据切开，打上ID，收到之后根据ID进行恢复，保证数据正常。

TCP协议和UDP协议特性区别总结：

1. TCP协议是面向连接；UDP协议采用无连接
- TCP三次握手建立端到端连接；UDP利用IP提供面向无连接的通信服务

2. TCP协议可靠；UDP协议不可靠
- TCP超时重发、确认应答，直接提升通信的可靠性
- TCP具有窗口控制，提高速度
- TCP使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制
- TCP会将报文切开成一个个数据包，打上ID，收到之后根据ID进行恢复，保证数据正常。
- UDP没有TCP这些控制技术，UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并。




TCP用于在传输层有必要实现可靠传输的情况；而在一方面，UDP主要用于那些对高速传输和实时性有较高要求的通信或广播通信。TCP和 UDP应该根据应用的目的按需使用。

## TCP三次握手四次招手

 <img class="shadow" width="450" src="https://www.github.com/CoolRabbit520/photos/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1522410518079.jpg" />

### 三次握手时序
第一次握手：client发送syn＝1（**位码**）,随机产生seq number=x的数据包到server,server由SYN=1知道发送方要求建立联机;

第二次握手：server收到请求后要确认联机信息，向client发送ack number=x+1,syn=1（**位码**）,ack=1（**位码**）,随机产生seq=y的包;

第三次握手：client收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，client会再发送ack number=y+1，ack=1（**位码**），server收到后确认seq=seq+1,ack=1则连接建立成功。

### 四次挥手时序
第一次挥手：client发送FIN＝1（**位码**）,随机产生seq number=x的数据包到server,server由FIN=1知道发送方要求拆除连接;

第二次挥手：server收到请求后要确认拆除连接信息，向client发送ack number=x+1,ack=1（**位码**）。此时，client不会再向server发送数据，但是server还能继续向client发送数据;

第三次挥手：server结束发送数据，拆除连接。server发送FIN＝1（**位码**）,随机产生seq number=y的数据包到client。

第四次挥手：client收到FIN=1后，正式关闭拆除连接。向server发送ack number=x+1,ack=1（**位码**）。
### 为什么要三次握手
**“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。**

已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。     
这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。

**三次握手使得client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。**

### 为什么要四次分手
TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。


# 参考资料
1.[通俗大白话来理解TCP协议的三次握手和四次分手 · Issue #14 · jawil/blog](https://github.com/jawil/blog/issues/14)



  [1]: https://www.github.com/CoolRabbit520/photos/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1522410459874.jpg
  [2]: https://www.github.com/CoolRabbit520/photos/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1522410476858.jpg
